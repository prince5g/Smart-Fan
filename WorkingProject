#define BLYNK_TEMPLATE_ID "TMPL6csLxSHes"
#define BLYNK_TEMPLATE_NAME "Smart fanCopy"
#define BLYNK_AUTH_TOKEN "OBJ3BwxpX3OZ0qlnJhnMnXccFGqdUXjd"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>  // For servo control

// ===== Blynk credentials =====
char ssid[] = "Phone1";
char pass[] = "ssup12345";
char auth[] = "OBJ3BwxpX3OZ0qlnJhnMnXccFGqdUXjd";

// ===== Blynk setup =====
#define VPIN_FAN   V1
#define VPIN_SLIDER V2  // slider for servo angle

// ===== Section 1: Hand-motion + Servo control =====
const int RIGHT_SENSOR_PIN = 9;
const int LEFT_SENSOR_PIN  = 10;
const int SERVO_PIN        = 14;

const unsigned long DEBOUNCE_US   = 50000UL;
const unsigned long MAX_WINDOW_US = 1000000UL;
const unsigned long MIN_DIFF_US   = 50000UL;

const int SERVO_STEP = 30;
Servo motionServo;
int servoAngle = 90;

enum MotionState { IDLE, SAW_FIRST };
MotionState motionState = IDLE;
bool leftPrev=false, rightPrev=false;
unsigned long lastLeftChangeTime=0, lastRightChangeTime=0;
unsigned long tLeft=0, tRight=0, tFirst=0;

// ===== Section 2: Touch sensor + Fan control =====
const int TOUCH_PIN = 38;
const int FAN_PIN   = 16;
unsigned long lastDebounceTimeTouch=0;
const unsigned long debounceDelayTouch=50;
int lastReadingTouch=LOW, sensorStateTouch=LOW;
bool fanOn=false;

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Starting ESP32 sketch with Blynk slider");

  // Blynk
  Blynk.begin(auth, ssid, pass);
  // Sync fan widget
  Blynk.virtualWrite(VPIN_FAN, fanOn?1:0);
  // Sync initial servo angle to slider
  Blynk.virtualWrite(VPIN_SLIDER, servoAngle);

  // Section 1 pins
  pinMode(LEFT_SENSOR_PIN, INPUT);
  pinMode(RIGHT_SENSOR_PIN, INPUT);
  motionServo.attach(SERVO_PIN);
  motionServo.write(servoAngle);

  // Section 2 pins
  pinMode(TOUCH_PIN, INPUT);
  pinMode(FAN_PIN, OUTPUT);
  digitalWrite(FAN_PIN, LOW);
}

// Blynk: fan control
BLYNK_WRITE(VPIN_FAN) {
  bool desired = (param.asInt() != 0);
  if (desired != fanOn) {
    fanOn = desired;
    digitalWrite(FAN_PIN, fanOn?HIGH:LOW);
    Serial.printf("Fan via Blynk: %s\n", fanOn?"ON":"OFF");
  }
}

// Blynk: slider for servo angle
BLYNK_WRITE(VPIN_SLIDER) {
  int val = param.asInt();  // 0..180
  // Quantize to nearest multiple of SERVO_STEP:
  int q = (val + SERVO_STEP/2) / SERVO_STEP;  // rounding
  int angle = q * SERVO_STEP;
  if (angle < 0) angle = 0;
  if (angle > 180) angle = 180;
  if (angle != servoAngle) {
    servoAngle = angle;
    motionServo.write(servoAngle);
    Serial.printf("Servo via slider → %d\n", servoAngle);
    // Update slider widget to snapped value:
    Blynk.virtualWrite(VPIN_SLIDER, servoAngle);
  }
}

void loop() {
  Blynk.run();

  // ===== IR gesture logic =====
  unsigned long now_us = micros();
  bool leftNow  = (digitalRead(LEFT_SENSOR_PIN)  == HIGH);
  bool rightNow = (digitalRead(RIGHT_SENSOR_PIN) == HIGH);
  if (leftNow != leftPrev) {
    if (now_us - lastLeftChangeTime >= DEBOUNCE_US) {
      lastLeftChangeTime = now_us;
      if (leftNow && !leftPrev) handleMotionSensorRising(true, now_us);
      leftPrev = leftNow;
    }
  }
  if (rightNow != rightPrev) {
    if (now_us - lastRightChangeTime >= DEBOUNCE_US) {
      lastRightChangeTime = now_us;
      if (rightNow && !rightPrev) handleMotionSensorRising(false, now_us);
      rightPrev = rightNow;
    }
  }
  if (motionState == SAW_FIRST) {
    if (now_us - tFirst > MAX_WINDOW_US) {
      resetMotionDetection();
    } else if (tLeft && tRight) {
      long diff = (long)tRight - (long)tLeft;
      if (abs(diff) >= MIN_DIFF_US) {
        if (diff > 0) {
          moveServoRight();
        } else {
          moveServoLeft();
        }
        // After moving, update slider widget:
        Blynk.virtualWrite(VPIN_SLIDER, servoAngle);
      }
      resetMotionDetection();
    }
  }

  // ===== Touch toggles fan, sync to Blynk =====
  int readingTouch = digitalRead(TOUCH_PIN);
  if (readingTouch != lastReadingTouch) {
    lastDebounceTimeTouch = millis();
    lastReadingTouch = readingTouch;
  }
  if ((millis() - lastDebounceTimeTouch) > debounceDelayTouch) {
    if (readingTouch != sensorStateTouch) {
      sensorStateTouch = readingTouch;
      if (sensorStateTouch == HIGH) {
        fanOn = !fanOn;
        digitalWrite(FAN_PIN, fanOn?HIGH:LOW);
        Serial.printf("Touch toggled fan: %s\n", fanOn?"ON":"OFF");
        Blynk.virtualWrite(VPIN_FAN, fanOn?1:0);
      }
    }
  }

  delay(1);
}

void handleMotionSensorRising(bool isLeft, unsigned long timestamp) {
  if (motionState == IDLE) {
    if (isLeft) { tLeft = timestamp; tRight = 0; }
    else       { tRight = timestamp; tLeft = 0; }
    tFirst = timestamp;
    motionState = SAW_FIRST;
  }
  else if (motionState == SAW_FIRST) {
    if (isLeft && tLeft == 0)       tLeft = timestamp;
    else if (!isLeft && tRight == 0) tRight = timestamp;
  }
}

void resetMotionDetection() {
  tLeft = tRight = tFirst = 0;
  motionState = IDLE;
}

void moveServoRight() {
  servoAngle += SERVO_STEP;
  if (servoAngle > 180) servoAngle = 180;
  motionServo.write(servoAngle);
  Serial.printf("Servo angle (IR→Right): %d\n", servoAngle);
}

void moveServoLeft() {
  servoAngle -= SERVO_STEP;
  if (servoAngle < 0) servoAngle = 0;
  motionServo.write(servoAngle);
  Serial.printf("Servo angle (IR→Left): %d\n", servoAngle);
}
