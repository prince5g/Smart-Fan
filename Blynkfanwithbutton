#define BLYNK_TEMPLATE_ID "TMPL6csLxSHes"
#define BLYNK_TEMPLATE_NAME "Smart fanCopy"
#define BLYNK_AUTH_TOKEN "OBJ3BwxpX3OZ0qlnJhnMnXccFGqdUXjd"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>  // For servo control

// ===== Blynk credentials =====
char ssid[] = "Phone1";
char pass[] = "ssup12345";
char auth[] = "OBJ3BwxpX3OZ0qlnJhnMnXccFGqdUXjd";

#define VPIN_FAN V1  // virtual pin for fan control

// ===== Section 1: Hand-motion + Servo control =====
// Pin definitions
const int RIGHT_SENSOR_PIN = 9;
const int LEFT_SENSOR_PIN  = 10;
const int SERVO_PIN        = 14;

// Debounce & timing parameters (in microseconds)
const unsigned long DEBOUNCE_US      = 50000UL;   // 50 ms debounce
const unsigned long MAX_WINDOW_US    = 1000000UL; // 1 second max between sensors
const unsigned long MIN_DIFF_US      = 50000UL;   // 50 ms minimum to consider direction

// Servo control
const int SERVO_STEP = 30;
Servo motionServo;
int servoAngle = 90;  // start at middle (0–180)

// State machine for motion detection
enum MotionState { IDLE, SAW_FIRST };
MotionState motionState = IDLE;

// Previous readings & debounce tracking
bool leftPrev  = false;
bool rightPrev = false;
unsigned long lastLeftChangeTime  = 0;
unsigned long lastRightChangeTime = 0;

// Timestamps when sensor first saw object (in micros)
unsigned long tLeft  = 0;
unsigned long tRight = 0;
unsigned long tFirst = 0;

// ===== Section 2: Touch sensor + Fan control =====
// Pin definitions
const int TOUCH_PIN = 38;   // digital input from touch sensor module
const int FAN_PIN   = 16;   // output to drive transistor/relay for DC motor fan

// Debounce parameters for touch
unsigned long lastDebounceTimeTouch = 0;
const unsigned long debounceDelayTouch = 50;  // milliseconds

// State tracking for touch
int lastReadingTouch = LOW;    // last raw reading from sensor pin
int sensorStateTouch = LOW;    // debounced stable state
bool fanOn = false;            // current fan state

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Starting combined ESP32 sketch: Motion+Servo and Touch+Fan + Blynk");

  // --- Setup for Blynk ---
  Blynk.begin(auth, ssid, pass);
  // Sync initial fan state to Blynk widget
  Blynk.virtualWrite(VPIN_FAN, fanOn ? 1 : 0);

  // --- Setup for Section 1 ---
  pinMode(LEFT_SENSOR_PIN, INPUT);
  pinMode(RIGHT_SENSOR_PIN, INPUT);
  motionServo.attach(SERVO_PIN);
  motionServo.write(servoAngle);

  // --- Setup for Section 2 ---
  pinMode(TOUCH_PIN, INPUT);       // assume HIGH when touched; if inverted, use INPUT_PULLUP and treat LOW as touch
  pinMode(FAN_PIN, OUTPUT);
  digitalWrite(FAN_PIN, LOW);      // start with fan off
}

// Blynk handler: control fan via virtual pin V1
BLYNK_WRITE(VPIN_FAN) {
  bool desired = (param.asInt() != 0);
  if (desired != fanOn) {
    fanOn = desired;
    digitalWrite(FAN_PIN, fanOn ? HIGH : LOW);
    Serial.print("Blynk sets fan to ");
    Serial.println(fanOn ? "ON" : "OFF");
  }
}

void loop() {
  Blynk.run();

  // ===== Part A: Hand-motion + Servo logic =====
  unsigned long now_us = micros();
  bool leftNow  = (digitalRead(LEFT_SENSOR_PIN)  == HIGH);
  bool rightNow = (digitalRead(RIGHT_SENSOR_PIN) == HIGH);

  // Debounced edge detection for LEFT sensor
  if (leftNow != leftPrev) {
    if (now_us - lastLeftChangeTime >= DEBOUNCE_US) {
      lastLeftChangeTime = now_us;
      if (leftNow && !leftPrev) {
        handleMotionSensorRising(true, now_us);
      }
      leftPrev = leftNow;
    }
  }

  // Debounced edge detection for RIGHT sensor
  if (rightNow != rightPrev) {
    if (now_us - lastRightChangeTime >= DEBOUNCE_US) {
      lastRightChangeTime = now_us;
      if (rightNow && !rightPrev) {
        handleMotionSensorRising(false, now_us);
      }
      rightPrev = rightNow;
    }
  }

  // If we saw first trigger, check for second or timeout
  if (motionState == SAW_FIRST) {
    if (now_us - tFirst > MAX_WINDOW_US) {
      Serial.println("Motion: Timeout waiting for second sensor; resetting.");
      resetMotionDetection();
    }
    else if (tLeft != 0 && tRight != 0) {
      long diff = (long)tRight - (long)tLeft; // positive if Right came after Left
      if (abs(diff) < (long)MIN_DIFF_US) {
        Serial.println("Motion: Ambiguous/Simultaneous Movement");
      }
      else if (diff > 0) {
        Serial.println("Motion Detected: Left → Right");
        moveServoRight();
      }
      else {
        Serial.println("Motion Detected: Right → Left");
        moveServoLeft();
      }
      resetMotionDetection();
    }
  }

  // ===== Part B: Touch sensor + Fan logic =====
  int readingTouch = digitalRead(TOUCH_PIN);

  if (readingTouch != lastReadingTouch) {
    lastDebounceTimeTouch = millis();
    lastReadingTouch = readingTouch;
  }
  if ((millis() - lastDebounceTimeTouch) > debounceDelayTouch) {
    if (readingTouch != sensorStateTouch) {
      sensorStateTouch = readingTouch;
      // Toggle fan on rising edge of touch. If your sensor is active LOW, change to (sensorStateTouch == LOW).
      if (sensorStateTouch == HIGH) {
        fanOn = !fanOn;
        digitalWrite(FAN_PIN, fanOn ? HIGH : LOW);
        Serial.print("Touch detected; toggling fan to ");
        Serial.println(fanOn ? "ON" : "OFF");
        // Update Blynk widget so app stays in sync
        Blynk.virtualWrite(VPIN_FAN, fanOn ? 1 : 0);
      }
    }
  }

  // Small delay/yield
  delay(1);
}

// ===== Functions for Section 1 =====
void handleMotionSensorRising(bool isLeft, unsigned long timestamp) {
  if (motionState == IDLE) {
    // First trigger
    if (isLeft) {
      tLeft = timestamp;
      tRight = 0;
    } else {
      tRight = timestamp;
      tLeft = 0;
    }
    tFirst = timestamp;
    motionState = SAW_FIRST;
    //Serial.println(isLeft ? "First: LEFT" : "First: RIGHT");
  }
  else if (motionState == SAW_FIRST) {
    // Second trigger if not recorded yet
    if (isLeft && tLeft == 0) {
      tLeft = timestamp;
      //Serial.println("Second: LEFT");
    }
    else if (!isLeft && tRight == 0) {
      tRight = timestamp;
      //Serial.println("Second: RIGHT");
    }
    // else: ignore repeats
  }
}

void resetMotionDetection() {
  tLeft = tRight = tFirst = 0;
  motionState = IDLE;
}

void moveServoRight() {
  servoAngle += SERVO_STEP;
  if (servoAngle > 180) servoAngle = 180;
  motionServo.write(servoAngle);
  Serial.print("Servo angle: ");
  Serial.println(servoAngle);
}

void moveServoLeft() {
  servoAngle -= SERVO_STEP;
  if (servoAngle < 0) servoAngle = 0;
  motionServo.write(servoAngle);
  Serial.print("Servo angle: ");
  Serial.println(servoAngle);
}
